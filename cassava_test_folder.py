# -*- coding: utf-8 -*-
"""Cassava_Test_folder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTtltsr13ao66D1QToxjxr4kxg9vX0gz
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt
import os
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, accuracy_score

# File paths
model_path = '/content/drive/MyDrive/cassava-leaf-disease-dataset/best_model.keras'  # Update as per your path
test_folder_path = '/content/drive/MyDrive/cassava-leaf-disease-dataset/validation/healthy'  # Update as per your path

# Verify model and test folder existence
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model file not found at {model_path}. Please check the path.")
if not os.path.exists(test_folder_path):
    raise FileNotFoundError(f"Test folder not found at {test_folder_path}. Please check the path.")

# Load the trained model
print("Loading model...")
model = load_model(model_path)
print("Model loaded successfully!")

# Define the class labels (update based on your dataset)
class_labels = ['Healthy', 'Mosaic']  # Adjust based on your dataset

# Function to preprocess an image
def preprocess_image(image_path):
    """
    Preprocess the test image for prediction.
    Args:
        image_path (str): Path to the image file.

    Returns:
        numpy.ndarray: Preprocessed image ready for the model.
    """
    img = load_img(image_path, target_size=(224, 224))  # Resize to model input size
    img_array = img_to_array(img)  # Convert image to numpy array
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = img_array / 255.0  # Normalize pixel values to [0, 1]
    return img_array

# Define lists to store true and predicted labels
true_labels = []
predicted_labels = []

# Iterate through the folder and classify each image
print(f"Classifying images in folder: {test_folder_path}")
results = []

for file_name in os.listdir(test_folder_path):
    file_path = os.path.join(test_folder_path, file_name)
    if not file_name.lower().endswith(('jpg', 'jpeg', 'png')):  # Skip non-image files
        print(f"Skipping non-image file: {file_name}")
        continue

    print(f"Processing image: {file_name}")
    try:
        # Extract true label (modify logic to match your dataset structure)
        true_label = "Healthy"  # Replace with dynamic label extraction logic if needed
        true_labels.append(class_labels.index(true_label))

        # Preprocess and predict
        test_image = preprocess_image(file_path)
        predictions = model.predict(test_image, verbose=0)
        predicted_class = np.argmax(predictions, axis=1)[0]  # Get index of highest probability
        predicted_label = class_labels[predicted_class]
        predicted_labels.append(predicted_class)

        # Save result to list
        results.append((file_name, predicted_label))

        # Display result
        print(f"Image: {file_name}, Predicted class: {predicted_label}")

        # Optionally visualize the image and prediction
        img = load_img(file_path)
        plt.imshow(img)
        plt.title(f"Predicted: {predicted_label}")
        plt.axis('off')  # Hide axes
        plt.show()
    except Exception as e:
        print(f"Error processing {file_name}: {e}")

# Compute confusion matrix and classification report
if true_labels and predicted_labels:
    # Confusion Matrix
    cm = confusion_matrix(true_labels, predicted_labels)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)
    disp.plot(cmap=plt.cm.Blues)
    plt.title("Confusion Matrix")
    plt.show()

    # Accuracy Score
    accuracy = accuracy_score(true_labels, predicted_labels)
    print(f"\nAccuracy: {accuracy:.2f}")

    # Classification Report
    print("\nClassification Report:")
    report = classification_report(true_labels, predicted_labels, target_names=class_labels)
    print(report)

# Summary of results
print("\nSummary of Predictions:")
for file_name, label in results:
    print(f"{file_name}: {label}")