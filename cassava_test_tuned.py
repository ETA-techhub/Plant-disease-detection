# -*- coding: utf-8 -*-
"""Cassava_Test_tuned.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17GcDVmZkylA6KWZvFjGphV39G9QzC0bJ
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os

# File paths
model_path = '/content/drive/MyDrive/cassava-leaf-disease-dataset/best_model.keras'  # Updated to .keras file
test_image_path = '/content/drive/MyDrive/cassava-leaf-disease-dataset/test_image2.jpg'

# Verify model and test image existence
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model file not found at {model_path}. Please check the path.")
if not os.path.exists(test_image_path):
    raise FileNotFoundError(f"Test image file not found at {test_image_path}. Please check the path.")

# Load the trained model
print("Loading model...")
model = load_model(model_path)
print("Model loaded successfully!")

# Define the class labels (update with actual classes used in training)
class_labels = ['Healthy', 'Mosaic']  # Adjust based on your dataset

# Function to preprocess the test image
def preprocess_image(image_path):
    """
    Preprocess the test image for prediction.
    Args:
        image_path (str): Path to the image file.

    Returns:
        numpy.ndarray: Preprocessed image ready for the model.
    """
    img = load_img(image_path, target_size=(224, 224))  # Resize to model input size
    img_array = img_to_array(img)  # Convert image to numpy array
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    img_array = img_array / 255.0  # Normalize pixel values to [0, 1]
    return img_array

# Preprocess the test image
print(f"Preprocessing test image: {test_image_path}")
test_image = preprocess_image(test_image_path)

# Predict the class
print("Making prediction...")
predictions = model.predict(test_image)
predicted_class = np.argmax(predictions, axis=1)[0]  # Get index of highest probability
predicted_label = class_labels[predicted_class]

# Display prediction results
print(f"Prediction completed. Predicted class: {predicted_label}")

# Visualize the test image with prediction
img = mpimg.imread(test_image_path)
plt.imshow(img)
plt.title(f"Predicted: {predicted_label}")
plt.axis('off')  # Hide axes for better visualization
plt.show()